[gd_scene load_steps=22 format=3 uid="uid://bh7hetspcaxp0"]

[ext_resource type="PackedScene" uid="uid://becfhb65goqg6" path="res://scenes/ui/in_game_menu.tscn" id="1_6olxy"]
[ext_resource type="Texture2D" uid="uid://h7awm5rksxsf" path="res://assets/floorTexture.png" id="2_y6wmg"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_1cg2s"]

[sub_resource type="Sky" id="Sky_s1kgf"]
sky_material = SubResource("ProceduralSkyMaterial_1cg2s")

[sub_resource type="Environment" id="Environment_snm0g"]
background_mode = 2
background_energy_multiplier = 2.0
sky = SubResource("Sky_s1kgf")

[sub_resource type="GDScript" id="GDScript_jn46l"]
resource_name = "world_environment"
script/source = "extends WorldEnvironment


func _ready():
	SettingsDataManager.connect(\"apply_in_game_settings\", apply_in_game_settings)


func apply_in_game_settings(section: StringName, element: StringName, value = null) -> void:
	match element:
		&\"SSRQuality\":
			# Set SSR settings to recieved values
			set_ssr_settings(section, element, value)
		&\"SSAOQuality\":
			# Set SSAO settings
			set_ssao_settings(section, element)
		&\"SSILQuality\":
			# Set SSIL settings
			set_ssil_settings(section, element)
		&\"SDFGIQuality\":
			# Set SDFGI settings
			set_sdfgi_settings(section, element)
		&\"GlowQuality\":
			# Set Glow settings
			set_glow_settings(section, element)


# Used to set the SSR settings
func set_ssr_settings(section: StringName, element: StringName, value) -> void:
	# Get the value of the element
	var elementValue: String = SettingsDataManager.SETTINGS_DATA[section][element]
	
	# Check if the element value is disabled
	if elementValue == \"Disabled\":
		# Disable SSR and return
		environment.set_ssr_enabled(false)
		return
	
	# Enable SSR
	environment.set_ssr_enabled(true)
	# Set max steps for SSR
	environment.set_ssr_max_steps(value[\"maxSteps\"])
	# Set fade in distance for SSR
	environment.set_ssr_fade_in(value[\"fadeIn\"])
	# Set fade out distance for SSR
	environment.set_ssr_fade_out(value[\"fadeOut\"])


# Used to set the SSAO settings
func set_ssao_settings(section: StringName, element: StringName) -> void:
	# Get the value of the element
	var elementValue: String = SettingsDataManager.SETTINGS_DATA[section][element]
	
	# Check if the element value is disabled
	if elementValue == \"Disabled\":
		# Disable SSAO and return
		environment.set_ssao_enabled(false)
		return
	
	# Enable SSAO
	environment.set_ssao_enabled(true)


# Used to set the SSIL settings
func set_ssil_settings(section: StringName, element: StringName) -> void:
	# Get the value of the element
	var elementValue: String = SettingsDataManager.SETTINGS_DATA[section][element]
	
	# Check if the element value is disabled
	if elementValue == \"Disabled\":
		# Disable SSIL and return
		environment.set_ssil_enabled(false)
		return
	
	# Enable SSIL
	environment.set_ssil_enabled(true)


# Used to set the SDFGI settings
func set_sdfgi_settings(section: StringName, element: StringName) -> void:
	# Get the value of the element
	var elementValue: String = SettingsDataManager.SETTINGS_DATA[section][element]
	
	# Check if the element value is disabled
	if elementValue == \"Disabled\":
		# Disable SDFGI and return
		environment.set_sdfgi_enabled(false)
		return
	
	# Enable SDFGI
	environment.set_sdfgi_enabled(true)


# Used to set the Glow settings
func set_glow_settings(section: StringName, element: StringName) -> void:
	# Get the value of the element
	var elementValue: String = SettingsDataManager.SETTINGS_DATA[section][element]
	
	# Check if the element value is disabled
	if elementValue == \"Disabled\":
		# Disable Glow and return
		environment.set_glow_enabled(false)
		return
	
	# Enable Glow
	environment.set_glow_enabled(true)
"

[sub_resource type="CameraAttributesPractical" id="CameraAttributesPractical_lwned"]
dof_blur_far_distance = 6.0

[sub_resource type="GDScript" id="GDScript_5q5hd"]
resource_name = "camera"
script/source = "extends Camera3D


func _ready():
	# Connect neccessary signal
	SettingsDataManager.connect(\"apply_in_game_settings\", apply_in_game_settings)


# Called to apply in game settings for the specific node
func apply_in_game_settings(section: StringName, element: StringName, _value) -> void:
	match element:
		&\"FOV\":
			# Set the camera FOV to the value stored in the settings data dictionary
			set_fov(SettingsDataManager.SETTINGS_DATA[section][element])
		&\"DepthOfField\":
			var enabled: bool
			
			# Check if the current value of the element is disabled
			if SettingsDataManager.SETTINGS_DATA[section][element] == \"Disabled\":
				enabled = false
			else:
				enabled = true
			
			# Disable/Enable DOF
			attributes.set_dof_blur_far_enabled(enabled)
			attributes.set_dof_blur_near_enabled(enabled)
"

[sub_resource type="GDScript" id="GDScript_lw3sa"]
resource_name = "control_panel"
script/source = "extends PanelContainer

@onready var camera: Camera3D = $\"../../Camera3D\"
@onready var menu: Control = $\"../InGameMenu\"
@onready var fpsCounter: Label = $MarginContainer/VBoxContainer/FPSCounter

@onready var defaultCameraPosition: Vector3 = camera.position
var animated: bool = false


func _process(delta):
	var moveAmount: float = 2
	var moveFreq: float = 0.001
	
	fpsCounter.set_text(\"FPS: \" + str(Engine.get_frames_per_second()))
	
	if animated:
		camera.position.x = lerp(camera.position.x, defaultCameraPosition.x + sin(Time.get_ticks_msec() * moveFreq) * moveAmount, delta/2)
		camera.position.z = lerp(camera.position.z, defaultCameraPosition.z + sin(Time.get_ticks_msec() * moveFreq * 0.5) * moveAmount, delta/2)
		camera.position.y = lerp(camera.position.y, defaultCameraPosition.y + sin(Time.get_ticks_msec() * moveFreq * 0.5) * moveAmount/2, delta/2)
	else:
		if camera.position != defaultCameraPosition:
			camera.position = camera.position.lerp(defaultCameraPosition, delta * 5)


func _on_toggle_animation_toggled(toggled_on):
	animated = toggled_on


func _on_hide_menu_toggled(toggled_on):
	menu.visible = !toggled_on
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_omi2h"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_ym35m"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_owuq1"]
albedo_texture = ExtResource("2_y6wmg")
uv1_triplanar = true

[sub_resource type="BoxMesh" id="BoxMesh_tecy0"]
material = SubResource("StandardMaterial3D_owuq1")
size = Vector3(15, 0.5, 15)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kqh6p"]
albedo_color = Color(0.239095, 0.542137, 0.849241, 1)

[sub_resource type="BoxMesh" id="BoxMesh_g1tso"]
material = SubResource("StandardMaterial3D_kqh6p")
size = Vector3(3.5, 3, 0.2)

[sub_resource type="BoxMesh" id="BoxMesh_ht2m6"]
material = SubResource("StandardMaterial3D_kqh6p")
size = Vector3(5, 3, 0.2)

[sub_resource type="BoxMesh" id="BoxMesh_g8j6u"]
material = SubResource("StandardMaterial3D_kqh6p")
size = Vector3(5, 0.2, 3.5)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_8lbeg"]
albedo_color = Color(0.268536, 0.670061, 0.227251, 1)
roughness = 0.3

[sub_resource type="SphereMesh" id="SphereMesh_1thse"]
material = SubResource("StandardMaterial3D_8lbeg")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_0pi3j"]
albedo_color = Color(0.831373, 0.345098, 1, 1)
emission_enabled = true
emission = Color(5, 0, 5, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_a0pb3"]
material = SubResource("StandardMaterial3D_0pi3j")
top_radius = 0.05
bottom_radius = 0.05
radial_segments = 8

[node name="TestScene" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_snm0g")
script = SubResource("GDScript_jn46l")

[node name="ReflectionProbes" type="Node3D" parent="."]

[node name="ReflectionProbe" type="ReflectionProbe" parent="ReflectionProbes"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0276005, 0, -2.11342)
size = Vector3(14.9817, 20, 6.90343)
origin_offset = Vector3(0, 0, -0.513672)
box_projection = true

[node name="Camera3D" type="Camera3D" parent="."]
attributes = SubResource("CameraAttributesPractical_lwned")
current = true
script = SubResource("GDScript_5q5hd")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.905658, -0.0180052, -0.423627, 0.250551, 0.828736, 0.500421, 0.342065, -0.55935, 0.755062, -3.04957, 2.46832, 3.17313)
shadow_enabled = true

[node name="GUI" type="CanvasLayer" parent="."]

[node name="InGameMenu" parent="GUI" instance=ExtResource("1_6olxy")]

[node name="ControlPanel" type="PanelContainer" parent="GUI"]
offset_right = 199.0
offset_bottom = 40.0
script = SubResource("GDScript_lw3sa")

[node name="MarginContainer" type="MarginContainer" parent="GUI/ControlPanel"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 4
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 4

[node name="VBoxContainer" type="VBoxContainer" parent="GUI/ControlPanel/MarginContainer"]
layout_mode = 2

[node name="FPSCounter" type="Label" parent="GUI/ControlPanel/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="HideMenu" type="CheckButton" parent="GUI/ControlPanel/MarginContainer/VBoxContainer"]
layout_mode = 2
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_omi2h")
text = "Hide Menu
"

[node name="ToggleAnimation" type="CheckButton" parent="GUI/ControlPanel/MarginContainer/VBoxContainer"]
layout_mode = 2
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_ym35m")
text = "Toggle Animation"

[node name="Floor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.40856, -6.17434)
mesh = SubResource("BoxMesh_tecy0")

[node name="Box" type="Node3D" parent="."]

[node name="RightWall" type="MeshInstance3D" parent="Box"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 2.39809, 0.165802, -3.80972)
mesh = SubResource("BoxMesh_g1tso")
skeleton = NodePath("../BackWall")

[node name="BackWall" type="MeshInstance3D" parent="Box"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.163491, -5.43965)
mesh = SubResource("BoxMesh_ht2m6")
skeleton = NodePath("../..")

[node name="LeftWall" type="MeshInstance3D" parent="Box"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -2.58522, 0.161893, -3.80296)
mesh = SubResource("BoxMesh_g1tso")
skeleton = NodePath("../BackWall")

[node name="Ceiling" type="MeshInstance3D" parent="Box"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.114113, 1.56223, -3.79209)
mesh = SubResource("BoxMesh_g8j6u")
skeleton = NodePath("../..")

[node name="Ball" type="MeshInstance3D" parent="."]
transform = Transform3D(0.854921, 0, 0.518758, 0, 1, 0, -0.518758, 0, 0.854921, 0, -0.153776, -3.51229)
mesh = SubResource("SphereMesh_1thse")

[node name="GlowRod" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.62941, 0.184332, -4.30836)
mesh = SubResource("CylinderMesh_a0pb3")

[connection signal="toggled" from="GUI/ControlPanel/MarginContainer/VBoxContainer/HideMenu" to="GUI/ControlPanel" method="_on_hide_menu_toggled"]
[connection signal="toggled" from="GUI/ControlPanel/MarginContainer/VBoxContainer/ToggleAnimation" to="GUI/ControlPanel" method="_on_toggle_animation_toggled"]
