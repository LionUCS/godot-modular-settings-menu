[gd_scene load_steps=6 format=3 uid="uid://b3w7qpn4nhmu2"]

[ext_resource type="PackedScene" uid="uid://ha87l3hl643g" path="res://scenes/ui/menu-elements/settings-elements/graphics-elements/scaler-sub-elements/resolution_scale.tscn" id="1_4irey"]
[ext_resource type="PackedScene" uid="uid://5dydkttc2fww" path="res://scenes/ui/menu-elements/settings-elements/graphics-elements/scaler-sub-elements/fsr_mode.tscn" id="2_w65g1"]
[ext_resource type="PackedScene" uid="uid://bdoaqhvw440eh" path="res://scenes/ui/menu-elements/settings-elements/graphics-elements/scaler-sub-elements/fsr_sharpness.tscn" id="3_v8pix"]

[sub_resource type="GDScript" id="GDScript_mdyud"]
resource_name = "scaler"
script/source = "extends VBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

@onready var options: OptionButton = $\"ScalingOptions/Options\"

# Reference to sub elements
@onready var resolutionScale: HBoxContainer = $ResolutionScale
@onready var fsrMode: HBoxContainer = $FSRMode
@onready var fsrSharpness: HBoxContainer = $FSRSharpness

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"Disabled\", 
	\"Bilinear\", 
	\"FSR 2.2\"
) var defaultValue: String = \"Disabled\"

var currentValue: String
var selectedIndex: int

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"Disabled\": Viewport.SCALING_3D_MODE_BILINEAR,
	\"Bilinear\": Viewport.SCALING_3D_MODE_BILINEAR,
	\"FSR 2.2\": Viewport.SCALING_3D_MODE_FSR2
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.ELEMENT_REFERENCE_TABLE[element] = self
	
	# Give section information to Resolution Scale sub element
	resolutionScale.sectionRef = sectionRef
	resolutionScale.section = section
	sectionRef.ELEMENT_REFERENCE_TABLE[resolutionScale.element] = resolutionScale
	
	# Give section information to FSR Options sub element
	fsrMode.sectionRef = sectionRef
	fsrMode.section = section
	sectionRef.ELEMENT_REFERENCE_TABLE[fsrMode.element] = fsrMode
	
	# Give section information to FSR Sharpness sub element
	fsrSharpness.sectionRef = sectionRef
	fsrSharpness.section = section
	sectionRef.ELEMENT_REFERENCE_TABLE[fsrSharpness.element] = fsrSharpness


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, section, element)
	# Initialize the option button
	selectedIndex = ElementResource.init_option_button_element(OPTION_LIST, options, currentValue)
	
	# Show the appropriate sub element when loading
	match currentValue:
		\"Disabled\":
			resolutionScale.hide()
			fsrMode.hide()
			fsrSharpness.hide()
		\"Bilinear\":
			fsrMode.hide()
			fsrSharpness.hide()
			resolutionScale.show()
		\"FSR 2.2\":
			resolutionScale.hide()
			fsrMode.show()
			fsrSharpness.show()
	
	# Check if TAA is selected
	call_deferred(\"check_anti_aliasing\")
	# Apply the loaded values to the game
	call_deferred(\"apply_settings\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)
	
	# Show the appropriate sub element based on the selected option
	match currentValue:
		\"Disabled\":
			resolutionScale.hide()
			fsrMode.hide()
			fsrSharpness.hide()
		\"Bilinear\":
			fsrMode.hide()
			fsrSharpness.hide()
			resolutionScale.show()
		\"FSR 2.2\":
			resolutionScale.hide()
			fsrMode.show()
			fsrSharpness.show()
	
	# Check if TAA is selected
	check_anti_aliasing()


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Change the scaling mode of the game to the selected option
	get_viewport().set_scaling_3d_mode(OPTION_LIST[currentValue])
	
	# Apply the appropriate scaling and additional settings
	match currentValue:
		\"Disabled\":
			get_viewport().set_scaling_3d_scale(1.0)
		\"Bilinear\":
			resolutionScale.apply_settings()
		\"FSR 2.2\":
			fsrMode.apply_settings()
			fsrSharpness.apply_settings()


# Checks if TAA is selected while FSR 2.2 is enabled
func check_anti_aliasing() -> void:
	# Check if the anti aliasing element exists and has TAA
	if sectionRef.ELEMENT_REFERENCE_TABLE.has(\"AntiAliasing\") && sectionRef.ELEMENT_REFERENCE_TABLE[\"AntiAliasing\"].OPTION_LIST.has(\"TAA\"):
		# Reference to the anti aliasing element
		var antiAliasing: HBoxContainer = sectionRef.ELEMENT_REFERENCE_TABLE[\"AntiAliasing\"]
		
		# Check if selected scaler mode is FSR 2.2
		if currentValue == \"FSR 2.2\":
			# Disable the TAA option for anti aliasing
			antiAliasing.options.set_item_disabled(antiAliasing.OPTION_LIST.find(\"TAA\"), true)
			
			# Check if TAA is selected
			if antiAliasing.currentValue == \"TAA\":
				# Reselect the anti aliasing mode
				ElementResource.option_selected(sectionRef, antiAliasing, antiAliasing.OPTION_LIST.find(\"Disabled\"))
				antiAliasing.options.selected = antiAliasing.selectedIndex
		else:
			# Enable the TAA option for anti aliasing again
			antiAliasing.options.set_item_disabled(antiAliasing.OPTION_LIST.find(\"TAA\"), false)
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="ScalingMode" type="VBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 0
script = SubResource("GDScript_mdyud")

[node name="ScalingOptions" type="HBoxContainer" parent="."]
layout_mode = 2
size_flags_vertical = 3

[node name="Label" type="Label" parent="ScalingOptions"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Scaling Mode"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="ScalingOptions"]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")

[node name="ResolutionScale" parent="." instance=ExtResource("1_4irey")]
visible = false
layout_mode = 2
size_flags_vertical = 3

[node name="FSRMode" parent="." instance=ExtResource("2_w65g1")]
visible = false
layout_mode = 2

[node name="FSRSharpness" parent="." instance=ExtResource("3_v8pix")]
visible = false
layout_mode = 2
