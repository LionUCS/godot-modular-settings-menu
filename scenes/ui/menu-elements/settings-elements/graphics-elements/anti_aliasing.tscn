[gd_scene load_steps=3 format=3 uid="uid://csg6c3uuct1ls"]

[sub_resource type="GDScript" id="GDScript_5w56l"]
resource_name = "anti_aliasing"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"Disabled\",
	\"FXAA\",
	\"2x MSAA\",
	\"4x MSAA\",
	\"8x MSAA\",
	\"TAA\"
) var defaultValue: String = \"Disabled\"

var selectedIndex: int
var currentValue: String

# List of options related to the settings element
const OPTION_LIST: Array[String] = [
	\"Disabled\",
	\"FXAA\",
	\"2x MSAA\",
	\"4x MSAA\",
	\"8x MSAA\",
	\"TAA\"
]


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.REFERENCE_TABLE[element] = self


# Loads the saved/default values of the element
func load_settings() -> void:
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(defaultValue, section, element)
	# Initialize the option button
	selectedIndex = ElementResource.init_option_button_element(OPTION_LIST, options, currentValue)
	
	# Apply the loaded values to the game
	if !check_applied_settings():
		call_deferred(\"apply_settings\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Enables the selected anti aliasing
	match currentValue:
		\"Disabled\":
			set_anti_aliasing_mode()
		\"FXAA\":
			set_anti_aliasing_mode(Viewport.SCREEN_SPACE_AA_FXAA)
		\"2x MSAA\":
			set_anti_aliasing_mode(Viewport.SCREEN_SPACE_AA_DISABLED, Viewport.MSAA_2X)
		\"4x MSAA\":
			set_anti_aliasing_mode(Viewport.SCREEN_SPACE_AA_DISABLED, Viewport.MSAA_4X)
		\"8x MSAA\":
			set_anti_aliasing_mode(Viewport.SCREEN_SPACE_AA_DISABLED, Viewport.MSAA_8X)
		\"TAA\":
			set_anti_aliasing_mode(Viewport.SCREEN_SPACE_AA_DISABLED, Viewport.MSAA_DISABLED, true)


# Checks if the current setting has already been applied
func check_applied_settings() -> bool:
	# Check the current anti aliasing mode
	var fxaaMode: bool = get_viewport().get_screen_space_aa() == Viewport.SCREEN_SPACE_AA_FXAA
	var msaaMode: String
	var taaMode: bool = get_viewport().is_using_taa()
	var appliedSettings: String = \"Disabled\"
	
	# Get the MSAA mode
	match get_viewport().get_msaa_3d():
		Viewport.MSAA_DISABLED:
			msaaMode = \"Disabled\"
		Viewport.MSAA_2X:
			msaaMode = \"2x MSAA\"
		Viewport.MSAA_4X:
			msaaMode = \"4x MSAA\"
		Viewport.MSAA_8X:
			msaaMode = \"8x MSAA\"
	
	# Determine the current anti aliasing setting as a string
	if fxaaMode:
		appliedSettings = \"FXAA\"
	elif taaMode:
		appliedSettings = \"TAA\"
	else:
		appliedSettings = msaaMode
	
	# Check if the current setting matches the saved setting
	return appliedSettings == currentValue


# Sets the anti aliasing mode according to the values provided
func set_anti_aliasing_mode(fxaaMode: Viewport.ScreenSpaceAA = Viewport.SCREEN_SPACE_AA_DISABLED, msaaMode: Viewport.MSAA = Viewport.MSAA_DISABLED, taaMode: bool = false) -> void:
	get_viewport().set_screen_space_aa(fxaaMode)
	get_viewport().set_msaa_3d(msaaMode)
	get_viewport().set_use_taa(taaMode)
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="AntiAliasing" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_5w56l")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Anti Aliasing"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
