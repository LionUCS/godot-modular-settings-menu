[gd_scene load_steps=3 format=3 uid="uid://cgqiotob5aaoq"]

[sub_resource type="GDScript" id="GDScript_v3ktk"]
resource_name = "shadow_quality"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"Low\",
	\"Medium\",
	\"High\"
) var defaultValue: String = \"Medium\"

var selectedIndex: int
var currentValue: String

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"Low\": RenderingServer.SHADOW_QUALITY_SOFT_LOW,
	\"Medium\": RenderingServer.SHADOW_QUALITY_SOFT_MEDIUM,
	\"High\": RenderingServer.SHADOW_QUALITY_SOFT_HIGH
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.ELEMENT_REFERENCE_TABLE[element] = self


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, section, element)
	# Initialize the option button
	ElementResource.init_option_button_element(OPTION_LIST, options, currentValue, self)
	
	# Apply the loaded values to the game
	call_deferred(\"apply_settings\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Set soft shadow quality for directional and positional lights
	RenderingServer.directional_soft_shadow_filter_set_quality(OPTION_LIST[currentValue])
	RenderingServer.positional_soft_shadow_filter_set_quality(OPTION_LIST[currentValue])
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="ShadowQuality" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_v3ktk")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Shadow Quality"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
