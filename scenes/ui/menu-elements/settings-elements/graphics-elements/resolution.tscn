[gd_scene load_steps=2 format=3 uid="uid://cn8r63dmvd55c"]

[sub_resource type="GDScript" id="GDScript_utf5l"]
resource_name = "resolution"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"3840x2160\", 
	\"2560x1440\", 
	\"1920x1080\", 
	\"1280x720\", 
	\"960x540\"
) var defaultValue: String = \"1920x1080\"

var currentValue: String
var selectedIndex: int

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"3840x2160\": Vector2i(3840, 2160),
	\"2560x1440\": Vector2i(2560, 1440),
	\"1920x1080\": Vector2i(1920, 1080),
	\"1280x720\": Vector2i(1280, 720),
	\"960x540\": Vector2i(960, 540)
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.ELEMENT_REFERENCE_TABLE[element] = self


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, section, element)
	# Initialize the option button
	selectedIndex = ElementResource.init_option_button_element(OPTION_LIST, options, currentValue)
	
	# Apply the loaded values to the game
	call_deferred(\"apply_settings\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Do nothing if the game is in fullscreen mode
	if DisplayServer.window_get_mode() == DisplayServer.WINDOW_MODE_EXCLUSIVE_FULLSCREEN:
		return
	
	# Check if the game is in borderless mode
	if DisplayServer.window_get_flag(DisplayServer.WINDOW_FLAG_BORDERLESS):
		# Change the window size to the display's current resolution
		DisplayServer.window_set_size(DisplayServer.screen_get_size(DisplayServer.window_get_current_screen()))
	else:
		# Change the window size to the selected resolution
		DisplayServer.window_set_size(OPTION_LIST[currentValue])
	
	# Center the game window
	get_window().move_to_center()
"

[node name="Resolution" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_utf5l")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Resolution"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
