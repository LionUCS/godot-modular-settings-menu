[gd_scene load_steps=3 format=3 uid="uid://byff0jwaicxvr"]

[sub_resource type="GDScript" id="GDScript_duwn0"]
resource_name = "display_mode"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: String = sectionRef.name
# The name of the settings element
@onready var element: String = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

@export_enum(
	\"Fullscreen\", 
	\"Windowed\", 
	\"Borderless Windowed\"
) var defaultValue: String = \"Fullscreen\"

var selectedIndex: int
var currentValue: String

# List of options related to the settings element
var OPTION_LIST: Dictionary = {
	\"Fullscreen\": DisplayServer.WINDOW_MODE_EXCLUSIVE_FULLSCREEN,
	\"Windowed\": DisplayServer.WINDOW_MODE_WINDOWED, 
	\"Borderless Windowed\": DisplayServer.WINDOW_MODE_WINDOWED
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.REFERENCE_TABLE[element] = self


func load_settings() -> void:
	currentValue = ElementResource.load_element_settings(defaultValue, section, element)
	selectedIndex = ElementResource.init_option_button_element(OPTION_LIST, options, currentValue)
	
	apply_settings()
	check_resolution()


func option_selected(index: int) -> void:
	ElementResource.option_selected(sectionRef, self, index)
	
	check_resolution()


func apply_settings() -> void:
	var selected: String = options.get_item_text(selectedIndex)
	
	if selected == \"Borderless Windowed\":
		DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, true)
	else:
		DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, false)
	
	DisplayServer.window_set_mode(OPTION_LIST[selected])


func check_resolution() -> void:
	if sectionRef.REFERENCE_TABLE.has(\"Resolution\"):
		var resolution = sectionRef.REFERENCE_TABLE[\"Resolution\"]
		
		if options.get_item_text(selectedIndex) != \"Windowed\":
			resolution.options.set_disabled(true)
		else:
			resolution.options.set_disabled(false)
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="DisplayMode" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_duwn0")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Display Mode"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
