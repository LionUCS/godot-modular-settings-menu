[gd_scene load_steps=3 format=3 uid="uid://byff0jwaicxvr"]

[sub_resource type="GDScript" id="GDScript_duwn0"]
resource_name = "display_mode"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"Fullscreen\", 
	\"Borderless Windowed\", 
	\"Windowed\"
) var defaultValue: String = \"Fullscreen\"

var selectedIndex: int
var currentValue: String

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"Fullscreen\": DisplayServer.WINDOW_MODE_EXCLUSIVE_FULLSCREEN,
	\"Borderless Windowed\": DisplayServer.WINDOW_MODE_WINDOWED,
	\"Windowed\": DisplayServer.WINDOW_MODE_WINDOWED
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.ELEMENT_REFERENCE_TABLE[element] = self


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, section, element)
	# Initialize the option button
	ElementResource.init_option_button_element(OPTION_LIST, options, currentValue, self)
	
	# Apply the loaded values to the game
	call_deferred(\"apply_settings\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)
	
	# Check if the resolution element should be disabled
	check_resolution()


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Change the display mode to the selected option
	DisplayServer.window_set_mode(OPTION_LIST[currentValue])
	
	# Check if Borderless Windowed has been selected and toggle the flag accordingly
	if currentValue == \"Borderless Windowed\":
		var displaySize: Vector2i = DisplayServer.screen_get_size(DisplayServer.window_get_current_screen())
		
		DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, true)
		# Change the window size to the main display's resolution
		DisplayServer.window_set_size(displaySize)
		# Change the viewport size to the selected resolution for correct scaling
		get_viewport().set_size(displaySize)
		# Center the window
		get_window().move_to_center()
	else:
		DisplayServer.window_set_flag(DisplayServer.WINDOW_FLAG_BORDERLESS, false)
	
	# Check if the resolution element exists
	check_resolution()


# Called to check if the resolution element should be disabled
func check_resolution() -> void:
	# Check if the the resolution element exists
	if sectionRef.ELEMENT_REFERENCE_TABLE.has(\"Resolution\"):
		# Get the reference for it
		var resolution = sectionRef.ELEMENT_REFERENCE_TABLE[\"Resolution\"]
		
		# Check if the selected option is not Windowed and toggle the resolution element accordingly
		if options.get_item_text(selectedIndex) != \"Windowed\":
			resolution.options.set_disabled(true)
		else:
			resolution.options.set_disabled(false)
			# Disable window resizing
			get_viewport().get_window().set_flag(Window.FLAG_RESIZE_DISABLED, resolution.resizable)
	else:
		# Check if the current mode is windowed
		if currentValue == \"Windowed\":
			# Enable window resizing
			get_viewport().get_window().set_flag(Window.FLAG_RESIZE_DISABLED, false)
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="DisplayMode" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_duwn0")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "Display Mode"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
