[gd_scene load_steps=3 format=3 uid="uid://idtbqnsqlvb6"]

[sub_resource type="GDScript" id="GDScript_kwfgn"]
resource_name = "vsync"
script/source = "extends HBoxContainer

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: String = sectionRef.name
# The name of the settings element
@onready var element: String = name

@onready var options: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = preload(\"res://resources/ui/settings_element_resource.tres\")

# Default values for the element
@export_enum(
	\"Disabled\",
	\"Enabled\",
	\"Adaptive\",
) var defaultValue: String = \"Disabled\"

var selectedIndex: int
var currentValue: String

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"Disabled\": DisplayServer.VSYNC_DISABLED,
	\"Enabled\": DisplayServer.VSYNC_ENABLED,
	\"Adaptive\": DisplayServer.VSYNC_ADAPTIVE
}


func _ready():
	# Neccessary signals
	options.connect(\"item_selected\", option_selected)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.REFERENCE_TABLE[element] = self


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, section, element)
	# Initialize the option button
	selectedIndex = ElementResource.init_option_button_element(OPTION_LIST, options, currentValue)
	
	# Apply the loaded values to the game
	call_deferred(\"apply_settings\")
	# Toggle the max fps element
	toggle_max_fps()


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(sectionRef, self, index)
	
	# Toggle the max fps element
	toggle_max_fps()


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Set the vsync mode to the selected option
	DisplayServer.window_set_vsync_mode(OPTION_LIST[currentValue])
	
	# Set the max fps to unlimited if vsync is being enabled
	if currentValue != \"Disabled\":
		Engine.set_max_fps(0)


# Disable/Enable the max fps element according to if vsync is on or not
func toggle_max_fps() -> void:
	# Check if the max fps element exists
	if sectionRef.REFERENCE_TABLE.has(\"MaxFPS\"):
		# Reference to the slider value node of the max fps element
		var sliderValue: HBoxContainer = sectionRef.REFERENCE_TABLE[\"MaxFPS\"].sliderValue
		
		# Check if vsync is disabled
		if currentValue == \"Disabled\":
			# Enable the max fps element
			sliderValue.slider.set_editable(true)
			sliderValue.valueBox.modulate = Color.WHITE
		else:
			# Disable the max fps element
			sliderValue.slider.set_editable(false)
			sliderValue.valueBox.modulate = Color.GRAY
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="VSync" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_kwfgn")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "V-Sync"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
