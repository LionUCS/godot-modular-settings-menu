[gd_scene load_steps=4 format=3 uid="uid://cqqhgk8ufkmqa"]

[ext_resource type="PackedScene" uid="uid://bbtri7oyxvehi" path="res://scenes/ui/menu-elements/settings-elements/controls-elements/input-settings-panel/input-settings-panel-elements/input_button.tscn" id="1_1y7ch"]
[ext_resource type="PackedScene" uid="uid://dvkksl3mrnoto" path="res://scenes/ui/menu-elements/settings-elements/discard_changes_popup.tscn" id="2_oparo"]

[sub_resource type="GDScript" id="GDScript_0eq0v"]
script/source = "extends Control

@onready var actionList: VBoxContainer = $VBoxContainer/PanelContainer/MarginContainer/VBoxContainer/ScrollContainer/ActionList
@onready var resetButton: Button = $VBoxContainer/PanelContainer/MarginContainer/VBoxContainer/ResetButton
@onready var backButton: Button = $VBoxContainer/HBoxContainer/BackButton
@onready var applyButton: Button = $VBoxContainer/HBoxContainer/ApplyButton
@onready var discardChangesPopup: PanelContainer = $DiscardChangesPopup

# Reference to the element this panel belongs to
var panelOwner: Node

# For remapping
var isRemapping: bool = false
var actionToRemap: String
var actionInputButton: Button

# Button scene for actions
@export var InputButtonScene: PackedScene

# List of events for each action
var ACTION_EVENTS: Dictionary
# Cache for changed actions
var PANEL_CACHE: Dictionary
# Reference list to the button for each action
var ACTION_REFERENCE_LIST: Dictionary


func _ready():
	# Connect necessary signals
	resetButton.connect(\"pressed\", reset_button_pressed)
	backButton.connect(\"pressed\", back_button_pressed)
	applyButton.connect(\"pressed\", apply_button_pressed)


# Called to populate the action list with actions
func create_action_list() -> void:
	# All the remappable actions
	var INPUT_ACTIONS: Dictionary = panelOwner.ACTION_LIST.duplicate()
	
	# Get the events for the actions
	ACTION_EVENTS = get_events(INPUT_ACTIONS)
	
	# Check if the action list is already populated
	if actionList.get_child_count() > 0:
		# Remove all the existing actions from the action list
		for item in actionList.get_children():
			item.queue_free()
	
	# Create the actions for the action list
	for action in INPUT_ACTIONS:
		# Instantiate the button scene
		var button: PanelContainer = InputButtonScene.instantiate()
		# Get references to the elements of the button scene
		var actionLabel: Label = button.actionLabel
		var actionInput: Button = button.actionInput
		# Get the event for the action
		var event = ACTION_EVENTS[action]
		
		# Add a reference of the instantiated button to the reference list
		ACTION_REFERENCE_LIST[action] = button
		# Change the label text of the button to the action it corresponds to
		actionLabel.text = INPUT_ACTIONS[action]
		
		# Check if the action has an event
		if event != null:
			# Change the input button's text of the button to the action's event
			actionInput.text = event.as_text().trim_suffix(\" (Physical)\")
		else:
			# Change the input button's text of the button to unbound
			actionInput.text = \"Unbound\"
		
		# Add the instantiated button the action list
		actionList.add_child(button)
		# Connect the input button's pressed signal
		actionInput.pressed.connect(input_button_pressed.bind(action, actionInput))


func input_button_pressed(action: String, actionInput: Button) -> void:
	# Check if a button is not being remapped currently
	if !isRemapping:
		isRemapping = true
		actionToRemap = action
		actionInputButton = actionInput
		actionInput.text = \"Press key to bind...\"


func _input(event):
	# Check if an action is being remapped currently
	if isRemapping:
		# Check if the desired input is either a keyboard or mouse input
		if event is InputEventKey || (event is InputEventMouseButton && event.pressed):
			# Check if the event is a mouse event and if it was a double click
			if event is InputEventMouseButton && event.double_click:
				# Disable the double click flag
				event.double_click = false
			
			# Set the input button's text to the inputted event
			actionInputButton.text = event.as_text().trim_suffix(\" (Physical)\")
			
			# Check if the inputted event is different compared to the saved one for the action
			if not check_matching_event(event):
				var duplicateEvent: String = check_duplicate_event(event)
				
				ACTION_EVENTS[actionToRemap] = event
				PANEL_CACHE[actionToRemap] = event
				applyButton.set_disabled(false)
				
				if duplicateEvent != \"\":
					ACTION_EVENTS[duplicateEvent] = null
					PANEL_CACHE[duplicateEvent] = null
					ACTION_REFERENCE_LIST[duplicateEvent].actionInput.text = \"Unbound\"
			
			isRemapping = false
			actionToRemap = \"\"
			actionInputButton = null
			
			accept_event()


# Checks if the inputted event matches the one saved for the action
func check_matching_event(event: InputEvent) -> bool:
	# Get the input type of the event
	var eventType: String = event.get_class()
	# Get the button index for the event
	var eventButton: int = get_event_button(event)
	# Get the currently saved event for the action
	var currentEvent = ACTION_EVENTS[actionToRemap]
	
	# Check if the event matches the action to be remapped
	if currentEvent != null and currentEvent.is_class(eventType) and get_event_button(currentEvent) == eventButton:
		return true
	
	return false


# Checks if any other action has the inputted event as it's event
func check_duplicate_event(event: InputEvent) -> String:
	# Get the input type of the event
	var eventType: String = event.get_class()
	# Get the button index for the event
	var eventButton: int = get_event_button(event)
	
	# Check for duplicates in other actions
	for action in ACTION_EVENTS:
		# Check if the action is not the one being remapped
		if action != actionToRemap:
			# Get the saved event for the action
			var storedEvent = ACTION_EVENTS[action]
			
			# Check if the input type and event matches the inputted event
			if storedEvent.is_class(eventType) and get_event_button(storedEvent) == eventButton:
				return action
	
	return \"\"


# Called to get the physical index for the inputted event depending on the input event's type
func get_event_button(event: InputEvent) -> int:
	# Check for the input event's type
	match event.get_class():
		\"InputEventKey\":
			return event.get_physical_keycode()
		\"InputEventMouseButton\":
			return event.get_button_index()
	
	return -1


# Called to update the action's events to the cached events
func update_action_events(ACTION_LIST: Dictionary) -> void:
	# Itterate through all the recieved actions
	for action in ACTION_LIST:
		# Remove all events for the action
		InputMap.action_erase_events(action)
		
		# Check if the action has an event assigned to it
		if ACTION_LIST[action] != null:
			# Add the new event to the action
			InputMap.action_add_event(action, ACTION_LIST[action])


# Called to get all the events for the remappable actions
func get_events(ACTIONS: Dictionary) -> Dictionary:
	var EVENTS: Dictionary = {}
	
	# Check if there is a save file or of the save file is valid
	if panelOwner.noSaveFile || panelOwner.invalidSaveFile:
		# Load the events from the project settings
		InputMap.load_from_project_settings()
		# Itterate through the remappable actions
		for action in ACTIONS:
			# Retrieve the first event for the action
			EVENTS[action] = InputMap.action_get_events(action)[0]
	else:
		# Retrieve the events from the loaded data
		EVENTS = panelOwner.INPUT_SETTINGS_DATA.duplicate()
	
	return EVENTS


func reset_button_pressed():
	PANEL_CACHE.clear()
	create_action_list()


func back_button_pressed():
	# Check if there have been any changes made
	if applyButton.is_disabled():
		# Clear the cache and return normally
		PANEL_CACHE.clear()
		hide()
		owner.settingsPanel.show()
	else:
		# Display the discard changes popup
		discardChangesPopup.show()


func apply_button_pressed():
	# Update the input map
	update_action_events(PANEL_CACHE)
	PANEL_CACHE.clear()
	# Send the new data to the parent element
	panelOwner.panel_settings_changed(ACTION_EVENTS)
	applyButton.set_disabled(true)
"

[node name="InputSettingsPanel" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_0eq0v")
InputButtonScene = ExtResource("1_1y7ch")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -194.0
offset_top = -29.0
offset_right = 194.0
offset_bottom = 30.0
grow_horizontal = 2
grow_vertical = 2

[node name="PanelContainer" type="PanelContainer" parent="VBoxContainer"]
custom_minimum_size = Vector2(0, 280)
layout_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="VBoxContainer/PanelContainer"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="VBoxContainer/PanelContainer/MarginContainer"]
layout_mode = 2

[node name="ScrollContainer" type="ScrollContainer" parent="VBoxContainer/PanelContainer/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="ActionList" type="VBoxContainer" parent="VBoxContainer/PanelContainer/MarginContainer/VBoxContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3

[node name="ResetButton" type="Button" parent="VBoxContainer/PanelContainer/MarginContainer/VBoxContainer"]
layout_mode = 2
focus_mode = 0
text = "Reset to default"

[node name="HBoxContainer" type="HBoxContainer" parent="VBoxContainer"]
layout_mode = 2

[node name="ApplyButton" type="Button" parent="VBoxContainer/HBoxContainer"]
layout_direction = 1
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
disabled = true
text = "Apply"

[node name="BackButton" type="Button" parent="VBoxContainer/HBoxContainer"]
layout_direction = 1
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
text = "Back"

[node name="DiscardChangesPopup" parent="." node_paths=PackedStringArray("parent") instance=ExtResource("2_oparo")]
visible = false
layout_mode = 1
parent = NodePath("..")
