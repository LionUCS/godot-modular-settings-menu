[gd_scene load_steps=2 format=3 uid="uid://i0w5gftb0j16"]

[sub_resource type="GDScript" id="GDScript_te2ja"]
resource_name = "input_settings"
script/source = "extends Button

# Reference to the section the settings element is under
@onready var sectionRef: TabBar = owner
# The section the settings element is under
@onready var section: StringName = sectionRef.name
# The name of the settings element
@onready var element: StringName = name

# Reference to the element's panel
const ElementPanel: PackedScene = preload(\"input-settings-panel/input_settings_panel.tscn\")

# List of actions to make remappable and how the name they should display
@export var ACTION_LIST: Dictionary = {
	\"up\": \"Up\",
	\"down\": \"Down\",
	\"left\": \"Left\",
	\"right\": \"Right\",
}

var INPUT_SETTINGS_DATA: Dictionary

var elementPanelRef: Node

# Path to the settings save file
var dataFolder: String = OS.get_user_data_dir()
var fileName: String = \"/keybinds.json\"
var path: String = dataFolder + fileName

# Flag for checking if a save file exists for input settings
var noSaveFile: bool
# Flag for checking if an invalid value was found in the save file
var invalidSaveFile: bool = false


func _ready():
	# Neccessary signals
	connect(\"pressed\", pressed)
	sectionRef.connect(\"apply_settings\", apply_settings)
	SettingsDataManager.connect(\"load_settings\", load_settings)
	
	# Add an entry of the settings element to the section's reference table
	sectionRef.ELEMENT_REFERENCE_TABLE[element] = self
	
	# Verify the directory
	DirAccess.make_dir_absolute(dataFolder)
	
	# Check if a save file exists
	if not FileAccess.file_exists(path):
		# Enable the no save file flag
		noSaveFile = true


# Loads the saved/default values of the element
func load_settings() -> void:
	# Create the element panel in the scene tree
	create_element_panel()
	
	# Get the current value for the element
	if noSaveFile:
		INPUT_SETTINGS_DATA = elementPanelRef.get_events(ACTION_LIST)
		save_input_settings()
	else:
		get_input_settings()
	
	if invalidSaveFile:
		INPUT_SETTINGS_DATA = elementPanelRef.get_events(ACTION_LIST)
		save_input_settings()
	else:
		# Apply the loaded values to the game
		call_deferred(\"apply_settings\")


func pressed() -> void:
	# Check if a save file exists
	if not FileAccess.file_exists(path):
		# Enable the no save file flag
		noSaveFile = true
	
	elementPanelRef.create_action_list()
	sectionRef.owner.settingsPanel.hide()
	elementPanelRef.show()


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	elementPanelRef.update_action_events(INPUT_SETTINGS_DATA)


func panel_settings_changed(NEW_VALUE: Dictionary) -> void:
	INPUT_SETTINGS_DATA = NEW_VALUE.duplicate()
	save_input_settings()


func save_input_settings() -> void:
	var file := FileAccess.open(path, FileAccess.WRITE)
	var DATA: Dictionary = {}
	
	for input in INPUT_SETTINGS_DATA:
		match INPUT_SETTINGS_DATA[input].get_class():
			\"InputEventKey\":
				DATA[input] = {
					\"type\": \"keyboard\",
					\"key\": INPUT_SETTINGS_DATA[input].get_physical_keycode()
				}
			\"InputEventMouseButton\":
				DATA[input] = {
					\"type\": \"mouse\",
					\"button\": INPUT_SETTINGS_DATA[input].get_button_index()
				}
	
	var jsonString: String = JSON.stringify(DATA, \"\\t\")
	file.store_string(jsonString)
	file.close()
	
	# Disable the no save file flag if it was enabled
	if noSaveFile:
		noSaveFile = false


func get_input_settings() -> void:
	var file := FileAccess.open(path, FileAccess.READ)
	var content: String = file.get_as_text()
	var DATA = JSON.parse_string(content)
	
	file.close()
	
	if DATA == null || DATA.size() == 0:
		push_error(\"Failed to parse input settings\")
		invalidSaveFile = true
		return
	
	verify_settings_data(DATA)


# Used for verifying the integrity of the save file
func verify_settings_data(DATA: Dictionary) -> void:
	for input in DATA:
		if ACTION_LIST.has(input):
			match DATA[input][\"type\"]:
				\"keyboard\":
					var key: InputEventKey = InputEventKey.new()
					
					key.set_physical_keycode(DATA[input][\"key\"])
					INPUT_SETTINGS_DATA[input] = key
				\"mouse\":
					var button: InputEventMouseButton = InputEventMouseButton.new()
					
					button.set_button_index(DATA[input][\"button\"])
					INPUT_SETTINGS_DATA[input] = button
		else:
			invalidSaveFile = true
			push_warning(\"Invalid input settings entry: \", input)


func create_element_panel() -> void:
	var elementPanels: Control = sectionRef.owner.elementPanels
	elementPanelRef = ElementPanel.instantiate()
	
	elementPanelRef.panelOwner = self
	elementPanelRef.hide()
	elementPanels.add_child(elementPanelRef)
	elementPanelRef.set_owner(sectionRef.owner)
"

[node name="InputSettings" type="Button"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
text = "Input Settings"
script = SubResource("GDScript_te2ja")
