[gd_scene load_steps=3 format=3 uid="uid://idtbqnsqlvb6"]

[sub_resource type="GDScript" id="GDScript_kwfgn"]
resource_name = "vsync"
script/source = "extends HBoxContainer

# Default values for the element
@export_enum(
	\"Disabled\",
	\"Enabled\",
	\"Adaptive\",
) var defaultValue: String = \"Disabled\"

# Toggle based on whether the element handles a setting that requires an in game node to exist
@export var isInGameSetting: bool = false
# Toggle based on whether the element is a sub element or not
@export var isSubElement: bool = false

# Reference to the node the settings element is under
@onready var parentRef: Node = owner
# Identifier for the element (used as the key for the section in the settings data)
@onready var identifier: StringName = name

# Element node references
@onready var optionsRef: OptionButton = $Options

# Resource for common functions between settings elements
const ElementResource: Resource = SettingsDataManager.ElementResource

# List of options related to the settings element
const OPTION_LIST: Dictionary = {
	\"Disabled\": DisplayServer.VSYNC_DISABLED,
	\"Enabled\": DisplayServer.VSYNC_ENABLED,
	\"Adaptive\": DisplayServer.VSYNC_ADAPTIVE
}

# Index of the currently selected item
var selectedIndex: int
# The current value of the element
var currentValue: String


func _ready():
	# Initialize the element
	ElementResource.init_element(&\"option\", parentRef, self)


# Loads the saved/default values of the element
func load_settings() -> void:
	# List of values for the element
	var VALUES: Dictionary = {
		\"defaultValue\": defaultValue,
		\"validOptions\": OPTION_LIST
	}
	
	# Get the current value for the element
	currentValue = ElementResource.load_element_settings(VALUES, parentRef, self)
	# Initialize the option button
	ElementResource.init_option_button_element(OPTION_LIST, optionsRef, currentValue, self)
	
	# Toggle the max fps element
	call_deferred(&\"toggle_max_fps\")


func option_selected(index: int) -> void:
	# Update the settings cache
	ElementResource.option_selected(parentRef, self, index)
	
	# Toggle the max fps element
	toggle_max_fps()


# Called to apply the settings in the settings cache
func apply_settings() -> void:
	# Set the vsync mode to the selected option
	DisplayServer.window_set_vsync_mode(OPTION_LIST[currentValue])
	
	# Set the max fps to unlimited if vsync is being enabled
	if currentValue != \"Disabled\":
		Engine.set_max_fps(0)
	
	# Check if the max fps element exists and if vsync is disabled
	if parentRef.ELEMENT_REFERENCE_TABLE.has(\"MaxFPS\") && currentValue == \"Disabled\":
		# Check if max fps has been changed
		if not parentRef.CHANGED_ELEMENTS.has(\"MaxFPS\"):
			# Apply the max fps settings manually
			parentRef.ELEMENT_REFERENCE_TABLE[\"MaxFPS\"].apply_settings()
	elif currentValue == \"Disabled\":
		# Set the max fps to the max fps read from the project settings
		Engine.set_max_fps(ProjectSettings.get_setting(\"application/run/max_fps\"))
	


# Disable/Enable the max fps element according to if vsync is on or not
func toggle_max_fps() -> void:
	# Check if the max fps element exists
	if parentRef.ELEMENT_REFERENCE_TABLE.has(\"MaxFPS\"):
		# Reference to the slider value node of the max fps element
		var sliderValue: HBoxContainer = parentRef.ELEMENT_REFERENCE_TABLE[\"MaxFPS\"].sliderValueRef
		
		# Check if vsync is disabled
		if currentValue == \"Disabled\":
			# Enable the max fps element
			sliderValue.sliderRef.set_editable(true)
			sliderValue.valueBoxRef.modulate = Color.WHITE
		else:
			# Disable the max fps element
			sliderValue.sliderRef.set_editable(false)
			sliderValue.valueBoxRef.modulate = Color.GRAY
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_drjjf"]

[node name="VSync" type="HBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_kwfgn")

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
text = "V-Sync"
vertical_alignment = 1

[node name="Options" type="OptionButton" parent="."]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
theme_override_styles/focus = SubResource("StyleBoxEmpty_drjjf")
